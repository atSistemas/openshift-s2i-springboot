apiVersion: v1
kind: Template
labels:
  template: polaris-springboot-pre
message: This Template create all the polaris resources to deploy automatically a springboot jar in pre environment
metadata:
  annotations:
    description: This it deploy springboot application in pre environment
    iconClass: icon-jboss
    tags: polaris,springboot,pre
  name: polaris-PRE
parameters:
- displayName: MyProject project name
  value: pres
  name: PROJECT
  required: true
- displayName: environment dev
  value: dev
  name: ENVDEV
  required: true  
- displayName: Polaris application name
  value: polaris
  name: APP
  required: true    
- displayName: Name jar to Application Spring Boot
  value: spring-boot.jar
  name: JARNAME
  required: true
objects:
-   apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: '2018-05-28T14:00:25Z'
      generation: 3
      labels:
        app: ${APP}-${PROJECT}
        template: polaris-springboot-pre
      name: ${PROJECT}-dc
      namespace: ${PROJECT}
    spec:
      replicas: 2
      revisionHistoryLimit: 10
      selector:
        deploymentconfig: ${PROJECT}-dc
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP}-${PROJECT}
            deploymentconfig: ${PROJECT}-dc
        spec:
          containers:
            - env:
                - name: JAVA_APP_JAR
                  value: spring-boot.jar
              name: deployment-pre
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            containerNames:
              - deployment-pre
            from:
              kind: ImageStreamTag
              name: '${APP}:latest'
              namespace: ${ENVDEV}
          type: ImageChange
        - type: ConfigChange                 
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP}-service
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: ${PROJECT}-dc      
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP}-r
  spec:
    to:
      kind: Service
      name: ${APP}-service